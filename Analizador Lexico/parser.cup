import java_cup.runtime.*;
import java.util.ArrayList;

parser code {: 
				public Node myTree = new Node("INIT");

                public Node getMyTree(){
                    return myTree;
                }

				public void report_error(String message, Object info) {
                    if (info instanceof Symbol) {
                        if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                            int line = (((Symbol)info).left)+1;
                            int column = (((Symbol)info).right)+1;
                            System.out.println(message + " " + " (line "+line+", column "+column+")");
                        }
                    }
                    System.err.println(message);
                }
                public void syntax_error(Symbol s){
                    String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
                    //errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
                    System.err.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
                }

                public void unrecovered_syntax_error(Symbol s) {
                    if (s.left < 1 || s.left < 1) return;
                    String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
                    //errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
                    System.err.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);

                }

                public String getTokenName(int id){
                    String value = sym.terminalNames[id];
                    switch(id) {
                        case sym.ParentesisAbierto:
                            return "(";
                        case sym.ParentesisCerrado:
                            return ")";
                        case sym.Coma:
                            return ",";
                        case sym.AsignacionTipo:
                            return ":";
                        case sym.AsignacionVariable:
                            return ":=";
                        case sym.FinalInstruccion:
                            return ";";
                        case sym.For:
                            return "for";
						case sym.While:
                            return "while";
						case sym.Repeat:
                            return "repeat";
						case sym.If:
                            return "if";
						case sym.AsignacionIgual:
                            return "=";	
                        default:
                            return value;  
                    }
                }
:};

terminal Begin, End, For, Function, If, To, Do, Else, Then, Until, While, Write, Read, 
		Tipo, Not, Or, And, OpRel, OpSuma, OpMult, AsignacionVariable, AsignacionTipo, 
		AsignacionIgual, FinalInstruccion, ParentesisAbierto, ParentesisCerrado, Coma, Punto, 
		Variable, Constchar, Conststr, Program, Repeat, Procedure, Numero, StringPattern, Var,
		Record;

non terminal program, identifier_list, declarations, subprogram_declaration, compound_statement, type,
		standard_type, subprogram_declarations, subprogram_head, arguments, parameter_list, optional_statements,
		statement_list, statement, expression, procedure_statement, tail, expression_list, factor, mult_expression, 
		constant, constant_character, constant_string, variable, simple_expression, write_function, read_function,
		relation, extra_expression, final_instruccion_error, records, lista_record_values, char_declaration, 
		integer_declaration, boolean_declaration;
		

program ::= Program Variable final_instruccion_error declarations subprogram_declarations compound_statement Punto {: System.out.println("COMPILADO CON EXITO"); :}
	| Program final_instruccion_error declarations subprogram_declarations compound_statement Punto {: System.out.println("COMPILADO CON EXITO"); :}
	;

identifier_list ::= Variable {:  :}
	| identifier_list Coma Variable {:  :}
	;

declarations ::= declarations Var identifier_list AsignacionTipo type FinalInstruccion {:  :}
	| char_declaration {: :}
	| integer_declaration {: :}
	| boolean_declaration {: :}
	| declarations Var identifier_list error type FinalInstruccion {: parser.report_error("Error en la asignacion de tipo", null); :}
	| declarations records {: :}
	| {:  :}
	; 

char_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual constant_character FinalInstruccion {: :}
	;

integer_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual Numero FinalInstruccion {: :}
	;

boolean_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual Variable FinalInstruccion {: :}
	;

type ::= standard_type {:  :}
	| {:  :}
	;

standard_type ::= Tipo {:  :}
	;

subprogram_declarations ::= subprogram_declarations subprogram_declaration final_instruccion_error {:  :}
	| subprogram_declarations final_instruccion_error {: :}
	| {:  :}
	; 

subprogram_declaration ::= subprogram_head declarations compound_statement {:  :}
	;

subprogram_head ::= Function Variable arguments AsignacionTipo standard_type final_instruccion_error {:  :}
	| Function Variable arguments AsignacionTipo final_instruccion_error {: :}
	| Procedure Variable arguments FinalInstruccion {:  :}
	;

arguments ::= ParentesisAbierto parameter_list ParentesisCerrado {:  :}
	|
	;

parameter_list ::= identifier_list AsignacionTipo type {:  :}
	| parameter_list FinalInstruccion identifier_list AsignacionTipo type {:  :}
	;

compound_statement ::= Begin optional_statements End {:  :}
	;

optional_statements ::= statement_list {:  :}
	| {:  :} 
	;

statement_list ::= statement FinalInstruccion {:  :}
	| error FinalInstruccion {: parser.report_error("Error en el statement", null); :}
	| statement_list statement FinalInstruccion {:  :}
	| statement_list error FinalInstruccion {: parser.report_error("Error en el statement", null); :}
	;

statement ::= variable AsignacionVariable expression {:  :}
	| procedure_statement {:  :}
	| compound_statement {:  :}
	| write_function {:  :}
	| read_function {:  :}
	| If expression Then statement Else statement {:  :}
	| If error {: parser.report_error("Error en el If", null); :}
	| While expression Do statement {: :}
	| While error {: parser.report_error("Error en el While", null); :}
	| For Variable AsignacionVariable Numero To expression Do statement {:  :}
	| For error {: parser.report_error("Error en el For", null); :}
	| Repeat statement Until Variable AsignacionIgual expression {:  :}
	| Repeat error {: parser.report_error("Error en el Repeat", null); :}
	;

write_function ::= Write ParentesisAbierto constant_string Coma Variable ParentesisCerrado {:  :}
	| Write ParentesisAbierto constant_string ParentesisCerrado {: :}
	;

read_function ::= Read ParentesisAbierto Variable ParentesisCerrado {:  :}
	;

variable ::= Variable tail {:  :}
	;

tail ::= expression tail {:  :}
	| {:  :}
	;

procedure_statement ::= Variable {:  :}
	| Variable ParentesisAbierto expression_list ParentesisCerrado {:  :}
	;

expression_list ::= expression:exp extra_expression:ex_exp {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, (ExpressionNode)ex_exp); 
		myTree = p;
		RESULT = p;
	:}
	;

expression ::= expression:exp And:and relation:rel {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, new Node("and"), (ExpressionNode)rel); 
		myTree = p;
		RESULT = p;
	:}
    | expression:exp Or:or relation:rel {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, new Node("or"), (ExpressionNode)rel);
		myTree = p;
		RESULT = p; 
	:}
    | relation:rel {: RESULT = rel; :}
	| error {: parser.report_error("Error en la expresion", null); :}
    ;

extra_expression ::= Coma expression:exp extra_expression:ex_exp {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, (ExpressionNode)ex_exp); 
		myTree = p;
		RESULT = p;
	:}
	| {:  :}
	;

relation ::= simple_expression:simp_exp {: RESULT = simp_exp; :}
    | simple_expression:simp_exp OpRel:oprel simple_expression:simp_exp2 {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)simp_exp, new Node("Operador Relacional"), (ExpressionNode)simp_exp2); 
		myTree = p;
		RESULT = p;
	:}
	| simple_expression:simp_exp AsignacionIgual:asignacion_igual simple_expression:simp_exp2 {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)simp_exp, new Node("Asignacion Igual"), (ExpressionNode)simp_exp2); 
		myTree = p;
		RESULT = p;
	:}
    ;

simple_expression ::= simple_expression:simp_exp OpSuma:opsuma mult_expression:mult_exp {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)simp_exp, new Node("Operador Suma"), (ExpressionNode)mult_exp); 
		myTree = p;
		RESULT = p;
	:}
	| mult_expression:mult_exp {: RESULT = mult_exp; :}
	;

mult_expression ::= mult_expression:mult_exp OpMult:opmult factor:fac {: ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)mult_exp, new Node("Operador Multiplicacion"), new Node("Factor")); 
		myTree = p;
		RESULT = p;
	:}
	| factor:fac {: RESULT = fac; :}
	;

factor ::= Numero:numero {: Node n = new Node("Numero");
        n.setValue("Integer");
        ExpressionNode p = new ExpressionNode("Expression" , n);
        RESULT = p;
	:}
	| Variable:var {: Node n = new Node("Variable");
		n.setValue("Variable");
		ExpressionNode p = new ExpressionNode("Expression", n);
		RESULT = p;
	:}
	| Not:not factor:fac {: Node n = new Node("Not");
        n.setValue("Not");
        ExpressionNode p = new ExpressionNode("Expression" , n, new Node("Factor"));
        RESULT = p; 
	:}
	| constant:cons {: RESULT = cons; :}
	| ParentesisAbierto expression_list:exp_list ParentesisCerrado {:  
		/*ArrayList n = new ArrayList();
		n.addAll((ArrayList)exp_list);
		RESULT = n;*/
	:}
	;

constant ::= constant_character {:  :}
	| constant_string {:  :}
	;

constant_character ::= Constchar {:  :}
	;

constant_string ::= Conststr {:  :}
	;

final_instruccion_error ::= FinalInstruccion {:  :}
    | error {: parser.report_error("Falta final de instruccion", null); :}
    ;

records ::= Var Variable AsignacionIgual Record lista_record_values End  {:  :}
	;

lista_record_values ::= Variable AsignacionTipo Tipo FinalInstruccion lista_record_values {:  :}
	| {: :}
	;