import java_cup.runtime.*;

parser code {: public void report_error(String message, Object info) {
                    if (info instanceof Symbol) {
                        if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                            int line = (((Symbol)info).left)+1;
                            int column = (((Symbol)info).right)+1;
                            System.out.println(message + " " + " (line "+line+", column "+column+")");
                        }
                    }
                    System.err.println(message);
                }
                public void syntax_error(Symbol s){
                    String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
                    //errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
                    System.err.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
                }

                public void unrecovered_syntax_error(Symbol s) {
                    if (s.left < 1 || s.left < 1) return;
                    String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
                    //errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
                    System.err.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);

                }

                public String getTokenName(int id){
                    String value = sym.terminalNames[id];
                    switch(id) {
                        case sym.ParentesisAbierto:
                            return "(";
                        case sym.ParentesisCerrado:
                            return ")";
                        case sym.Coma:
                            return ",";
                        case sym.AsignacionTipo:
                            return ":";
                        case sym.AsignacionVariable:
                            return ":=";
                        case sym.FinalInstruccion:
                            return ";";
                        case sym.For:
                            return "for";
                        default:
                            return value;  
                    }
                }
:};

terminal Begin, End, For, Function, If, To, Do, Else, Then, Until, While, Write, Read, 
		Tipo, Not, Or, And, OpRel, OpSuma, OpMult, AsignacionVariable, AsignacionTipo, 
		AsignacionIgual, FinalInstruccion, ParentesisAbierto, ParentesisCerrado, Coma, Punto, 
		Variable, Constchar, Conststr, Program, Repeat, Procedure, Numero;

non terminal program, identifier_list, declarations, subprogram_declaration, compound_statement, type,
		standard_type, subprogram_declarations, subprogram_head, arguments, parameter_list, optional_statements,
		statement_list, statement, expression, procedure_statement, tail, expression_list, factor, mult_expression, 
		constant, constant_character, constant_string, variable, simple_expression, write_function, read_function,
		relation, extra_expression;
		

program ::= Program Variable ParentesisAbierto identifier_list ParentesisCerrado FinalInstruccion declarations subprogram_declarations compound_statement Punto {: :}
	;

identifier_list ::= Variable {: :}
	| identifier_list Coma Variable {: :}
	;

declarations ::= declarations Variable identifier_list AsignacionTipo type FinalInstruccion {: :}
	| {: :}
	; 

type ::= standard_type {: :}
	| {: :}
	;

standard_type ::= Tipo {: :}
	;

subprogram_declarations ::= subprogram_declarations subprogram_declaration FinalInstruccion {: :}
	| {: :}
	; 

subprogram_declaration ::= subprogram_head declarations compound_statement {: :}
	;

subprogram_head ::= Function Variable arguments AsignacionTipo standard_type FinalInstruccion {: :}
	| Procedure Variable arguments FinalInstruccion {: :}
	;

arguments ::= ParentesisAbierto parameter_list ParentesisCerrado {: :}
	|
	;

parameter_list ::= identifier_list AsignacionTipo type {: :}
	| parameter_list FinalInstruccion identifier_list AsignacionTipo type {: :}
	;

compound_statement ::= Begin optional_statements End {: :}
	;

optional_statements ::= statement_list {: :}
	| {: :} 
	;

statement_list ::= statement {: :}
	| statement_list FinalInstruccion statement {: :}
	;

statement ::= variable AsignacionVariable expression {: :}
	| procedure_statement {: :}
	| compound_statement {: :}
	| write_function {: :}
	| read_function {: :}
	| If expression Then statement Else statement {: :}
	| While expression Do statement {: :}
	| For Variable AsignacionVariable To expression Do statement {: :}
	| Repeat statement Until Variable AsignacionIgual expression {: :}
	;

write_function ::= Write ParentesisAbierto constant_string Coma Variable ParentesisCerrado FinalInstruccion {:  :}
	;

read_function ::= Read ParentesisAbierto Variable ParentesisCerrado FinalInstruccion {:  :}
	;

variable ::= Variable tail {: :}
	;

tail ::= expression tail {: :}
	| {: :}
	;

procedure_statement ::= Variable {: :}
	| Variable ParentesisAbierto expression_list ParentesisCerrado {: :}
	;

expression_list ::= expression extra_expression {: :}
	;

extra_expression ::= Coma expression extra_expression {: :}
	| {: :}
	;

simple_expression ::= simple_expression OpSuma mult_expression {: :}
	| mult_expression {: :}
	;

mult_expression ::= mult_expression OpMult factor {: :}
	| factor {: :}
	;

expression ::= expression And relation {:  :}
    | expression Or relation {:  :}
    | relation {:  :}
    ;

relation ::= simple_expression {:  :}
    | simple_expression OpRel simple_expression {:  :}
    ;

factor ::= Numero {: :}
	| Not factor {: :}
	| constant {: :}
	| Variable ParentesisAbierto expression_list ParentesisCerrado {: :}
	| ParentesisAbierto expression_list ParentesisCerrado {: :}
	;

constant ::= constant_character {: :}
	| constant_string {: :}
	;

constant_character ::= Constchar {: :}
	;

constant_string ::= Conststr {: :}
	;