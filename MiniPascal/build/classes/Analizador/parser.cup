package Analizador;
import java_cup.runtime.*;
import org.json.simple.*;
import com.google.gson.*;
import java.util.ArrayList;
import Arbol.*;
import Table.*;
import Types.*;

parser code {:

	public ArrayList<String> errors = new ArrayList(); 
	public int offset = 0;
	public ArrayList current_scope = new ArrayList();

	public String Intermediate_code = "";
	public SymbolTable sym_table = new SymbolTable();
	public String current_type = "";
	public String current_operator = "";

	public Node myTree = new Node("INIT");

	public JSONObject program_json = new JSONObject();

	public String printTree(JSONObject obj){
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		JsonParser jp = new JsonParser();
		JsonElement je = jp.parse(obj.toString());
		String prettyJsonString = gson.toJson(je);
		return prettyJsonString;
	}

	public void backScope() {
		if(current_scope.size() > 0) {
			current_scope.remove(current_scope.size()-1);
		}
	}

	public void report_error(String message, Object info) {
		if (info instanceof Symbol) {
			if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
				int line = (((Symbol)info).left)+1;
				int column = (((Symbol)info).right)+1;
				System.out.println(message + " " + " (line "+line+", column "+column+")");
			}
		}
		System.out.println(message);
	}
	public void syntax_error(Symbol s){
		String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
		//errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
		System.out.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
	}

	public void unrecovered_syntax_error(Symbol s) {
		if (s.left < 1 ||s.left < 1) return;
		String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
		//errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
		System.out.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);

	}

	public String getTokenName(int id){
		String value = sym.terminalNames[id];
		switch(id) {
			case sym.ParentesisAbierto:
				return "(";
			case sym.ParentesisCerrado:
				return ")";
			case sym.Coma:
				return ",";
			case sym.AsignacionTipo:
				return ":";
			case sym.AsignacionVariable:
				return ":=";
			case sym.FinalInstruccion:
				return ";";
			case sym.For:
				return "for";
			case sym.While:
				return "while";
			case sym.Repeat:
				return "repeat";
			case sym.If:
				return "if";
			case sym.AsignacionIgual:
				return "=";	
			default:
				return value;  
		}
	}
:};

terminal Begin, End, For, Function, If, To, Do, Else, Then, Until, While, Write, Read, 
		Tipo, Not, Or, And, OpRel, OpSuma, OpMult, AsignacionVariable, AsignacionTipo, 
		AsignacionIgual, FinalInstruccion, ParentesisAbierto, ParentesisCerrado, Coma, Punto, 
		Variable, Constchar, Conststr, Program, Repeat, Procedure, Numero, Var,
		Record;

non terminal program, identifier_list, declarations, subprogram_declaration, compound_statement, type,
		standard_type, subprogram_declarations, subprogram_head, arguments, parameter_list, optional_statements,
		statement_list, statement, expression, procedure_statement, expression_list, factor, mult_expression, 
		constant, constant_character, constant_string, simple_expression, write_function, read_function,
		relation, extra_expression, final_instruccion_error, records, lista_record_values, char_declaration, 
		integer_declaration, boolean_declaration;
		
// program //
program ::=
	Program: p Variable: v
		{:
			current_scope.add(v);
		:}
	final_instruccion_error declarations: d subprogram_declarations: sd compound_statement: cs Punto: punto
		{:
			if(errors.size() == 0) {
				System.out.println("COMPILADO CON EXITO");				
			} else {
				for(String error : errors){
					System.out.println(error);
				}
				System.out.println("\t\t--- COMPILACIÓN FALLIDA ---");
			}
			
			//System.out.println(sym_table);

			JSONObject myJson = new JSONObject();
			myJson.put("Program", p.toString());
			myJson.put("Variable", v.toString());
			myJson.put("declarations", (JSONObject) d);
			myJson.put("subprogram_declarations", (JSONObject) sd);
			myJson.put("compound_statement", (JSONObject) cs);
			myJson.put("Punto", punto.toString());

			program_json = myJson;
			
			RESULT = myJson;
		:}
		|
	Program: p
		{:
			current_scope.add("ROOT");
		:}
	final_instruccion_error declarations: d subprogram_declarations: sd compound_statement: cs Punto: punto
		{:
			if(errors.size() == 0) {
				System.out.println("COMPILADO CON EXITO");				
			} else {
				for(String error : errors){
					System.out.println(error);
				}
				System.out.println("\t\t--- COMPILACIÓN FALLIDA ---");
			}

			//System.out.println(sym_table);

			JSONObject myJson = new JSONObject();
			myJson.put("Program", p.toString());
			myJson.put("declarations", (JSONObject) d);
			myJson.put("subprogram_declarations", (JSONObject) sd);
			myJson.put("compound_statement", (JSONObject) cs);
			myJson.put("Punto", punto.toString());

			program_json = myJson;
			RESULT = myJson;
		:}
	;
// \ program //

// identifier_list //
identifier_list ::=
	Variable: v
		{:
			ArrayList ids = new ArrayList();
			Token token = new Token(v.toString(), vright + 1, vleft + 1);
			ids.add(token);
			RESULT = ids;
		:}
		|
	identifier_list: idl Coma Variable: v
		{:
			ArrayList ids = (ArrayList) idl;
			Token token = new Token(v.toString(), vright + 1, vleft + 1);
			ids.add(token);
			RESULT = ids;
		:}
;
// \ identifier_list //

// declarations //
declarations ::=
	declarations: d Var: var identifier_list: idl AsignacionTipo: at type: t FinalInstruccion: fi
		{:
			
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}

			JSONObject myJson = new JSONObject();
			myJson.put("declarations", (JSONObject) d);
			myJson.put("Var", var.toString());
			JSONArray id_list = new JSONArray();
			for(Object value : (ArrayList) idl) {
				id_list.add(((Token)value).valex);		
			}				
			myJson.put("identifier_list", id_list);
			myJson.put("AsignacionTipo", at.toString());
			myJson.put("type", t.toString());
			myJson.put("FinalInstruccion", fi.toString());
			RESULT = myJson;
		:}
		|
	char_declaration: d
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("char_declaration", (JSONObject) d);
			RESULT = myJson;
		:}
		|
	integer_declaration: d
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("integer_declaration", (JSONObject) d);
			RESULT = myJson;
		:}
		|
	boolean_declaration: d
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("boolean_declaration", (JSONObject) d);
			RESULT = myJson;
		:}
		|
	declarations Var identifier_list error type FinalInstruccion 
		{:
			 parser.report_error("Error en la asignacion de tipo", null); 
		:}
		|
	declarations: d records: r
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("declarations", (JSONObject) d);
			myJson.put("records", (JSONObject) r);
			RESULT = myJson;
		:}
		|			
		{:
			// Empty
		:}
	; 
// \ declarations //

// char_declaration //
char_declaration ::=
	declarations:d Var: var identifier_list: idl AsignacionTipo: at type: t AsignacionIgual: ai constant_character: cc FinalInstruccion: fi
		{:
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}

			JSONObject myJson = new JSONObject();
			myJson.put("declarations", (JSONObject) d);
			myJson.put("Var", var.toString());
			JSONArray id_list = new JSONArray();
			for(Object value : (ArrayList) idl) {
				id_list.add(((Token)value).valex);		
			}				
			myJson.put("identifier_list", id_list);
			myJson.put("AsignacionTipo", at.toString());
			myJson.put("type", t.toString());
			myJson.put("AsignacionIgual", ai.toString());
			myJson.put("constant_character", cc.toString());
			myJson.put("FinalInstruccion", fi.toString());
			RESULT = myJson;
		:}
	;
// \ char_declaration //

// integer_declaration //
integer_declaration ::=
	declarations: d Var: var identifier_list: idl AsignacionTipo: at type: t AsignacionIgual: ai Numero: n FinalInstruccion:fi
		{:
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}

			JSONObject myJson = new JSONObject();
			myJson.put("declarations", (JSONObject) d);
			myJson.put("Var", var.toString());
			JSONArray id_list = new JSONArray();
			for(Object value : (ArrayList) idl) {
				id_list.add(((Token)value).valex);		
			}				
			myJson.put("identifier_list", id_list);
			myJson.put("AsignacionTipo", at.toString());
			myJson.put("type", t.toString());
			myJson.put("AsignacionIgual", ai.toString());
			myJson.put("Numero", n.toString());
			myJson.put("FinalInstruccion", fi.toString());
			RESULT = myJson;
		:}
	;
// \ integer_declaration //

// boolean_declaration //
boolean_declaration ::=
	declarations: d Var: var identifier_list: idl AsignacionTipo: at type: t AsignacionIgual: ai Variable: v FinalInstruccion: fi
		{:
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}

			JSONObject myJson = new JSONObject();
			myJson.put("declarations", (JSONObject) d);
			myJson.put("Var", var.toString());
			JSONArray id_list = new JSONArray();
			for(Object value : (ArrayList) idl) {
				id_list.add(((Token)value).valex);		
			}				
			myJson.put("identifier_list", id_list);
			myJson.put("AsignacionTipo", at.toString());
			myJson.put("type", t.toString());
			myJson.put("AsignacionIgual", ai.toString());
			myJson.put("Variable", v.toString());
			myJson.put("FinalInstruccion", fi.toString());
			RESULT = myJson;
			
		:}
	;
// \ boolean_declaration //

// type //
type ::=
	standard_type: t
		{:
			RESULT = t;
		:}
		|
		{:
			// Empty
		:}
	;
// \ type //

// standard_type //
standard_type ::=
	Tipo: t
		{:
			RESULT = t;
		:}
	;
// \ standard_type //

// subprogram_declarations //
subprogram_declarations ::=
	subprogram_declarations: sds subprogram_declaration: sd final_instruccion_error
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("subprogram_declaration", (JSONObject) sd);		
			myJson.put("subprogram_declarations", (JSONObject) sds);
			RESULT = myJson;
		:}
		|
		subprogram_declarations:sds final_instruccion_error
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("subprogram_declarations", (JSONObject) sds);		
			RESULT = myJson;
		:}
		|
		{:			
			// Empty
		:}
	; 
// \ subprogram_declarations //

// subprogram_declaration //
subprogram_declaration ::=
	subprogram_head: sh declarations: d compound_statement: cs
		{:
			backScope();

			JSONObject myJson = new JSONObject();
			myJson.put("subprogram_head", (JSONObject) sh);
			myJson.put("declarations", (JSONObject) d);			
			myJson.put("compound_statement", (JSONObject) cs);
			RESULT = myJson;
		:}
	;
// \ subprogram_declaration //

// subprogram_head //
subprogram_head ::=
	Function: p Variable: v arguments: a AsignacionTipo: at standard_type: t final_instruccion_error
		{:
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType type = new CustomType(pright + 1, pleft + 1, p.toString());
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);

			current_scope.add(v);

			JSONObject myJson = new JSONObject();
			myJson.put("Function", p.toString());
			myJson.put("Variable", v.toString());
			myJson.put("arguments", (JSONObject) a);
			myJson.put("AsignacionTipo", at.toString());
			myJson.put("standard_type", t.toString());
			RESULT = myJson;
		:}
		|
	Function: p Variable: v arguments: a AsignacionTipo: at final_instruccion_error
		{:
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType type = new CustomType(pright + 1, pleft + 1, p.toString());
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);

			current_scope.add(v);

			JSONObject myJson = new JSONObject();
			myJson.put("Function", p.toString());
			myJson.put("Variable", v.toString());
			myJson.put("arguments", (JSONObject) a);
			myJson.put("AsignacionTipo", at.toString());
			RESULT = myJson;
		:}
		|
	Procedure: p Variable: v arguments: a FinalInstruccion: fi
		{:
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType type = new CustomType(pright + 1, pleft + 1, p.toString());
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);

			current_scope.add(v);

			JSONObject myJson = new JSONObject();
			myJson.put("Procedure", p.toString());
			myJson.put("Variable", v.toString());
			myJson.put("arguments", (JSONObject) a);
			myJson.put("FinalInstruccion", fi.toString());
			RESULT = myJson;
		:}
	;
// \ subprogram_head //

// arguments //
arguments ::=
	ParentesisAbierto: pa parameter_list: pl ParentesisCerrado: pc
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("parameter_list", (JSONObject) pl);
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		:}
		|
		{:
			// Empty
		:}
	;
// \ arguments //

// parameter_list //
parameter_list ::=
	identifier_list: il AsignacionTipo: at type: t 
		{:
			JSONObject myJson = new JSONObject();
			JSONArray id_list = new JSONArray();
			for(Object value : (ArrayList) il) {
				id_list.add(((Token)value).valex);		
			}				
			myJson.put("identifier_list", id_list);
			myJson.put("AsignacionTipo", at.toString());
			myJson.put("type", t.toString());
			RESULT = myJson;
		:}
		|
	parameter_list: pl FinalInstruccion: fi identifier_list: il AsignacionTipo: at type: t
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("parameter_list", (JSONObject) pl);
			myJson.put("FinalInstruccion", fi.toString());
			JSONArray id_list = new JSONArray();
			for(Object value : (ArrayList) il) {
				id_list.add(((Token)value).valex);		
			}				
			myJson.put("identifier_list", id_list);
			myJson.put("AsignacionTipo", at.toString());
			myJson.put("type", t.toString());
			RESULT = myJson;
		:}
	;
// \ parameter_list //

// compound_statement //
compound_statement ::=
	Begin: b optional_statements: os End: e
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Begin", b.toString());
			myJson.put("optional_statements", (JSONObject) os);
			myJson.put("End", e.toString());
			RESULT = myJson;
		:}
	;
// \ compound_statement //

// optional_statements //
optional_statements ::=
	statement_list: state_list
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("statement_list", (JSONObject) state_list);
			RESULT = myJson;
		:}
		|
		{:
			// Empty
		:}
	;
// \ optional_statements //

// statement_list //
statement_list ::=
	statement: state FinalInstruccion: fi
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("statement", (JSONObject) state);
			myJson.put("FinalInstruccion", fi.toString());
			RESULT = myJson;
		:}
		|
	error FinalInstruccion
		{:
			parser.report_error("Error en el statement", null);
		:}
		|
	statement_list: state_list statement: state FinalInstruccion: fi
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("statement_list", (JSONObject) state_list);
			myJson.put("statement", (JSONObject) state);
			myJson.put("FinalInstruccion", fi.toString());
			RESULT = myJson;
		:}
		|
	statement_list error FinalInstruccion
		{:
			parser.report_error("Error en el statement", null);
		:}
	;
// \ statement_list //

// statement //
statement ::=
	Variable: v AsignacionVariable: av expression: exp
		{:
			JSONObject myJson = new JSONObject();
			SymbolRow current_var = sym_table.find(v.toString(), current_scope);
			if(current_var == null) {
				errors.add("Error: No existe la variable " + v + " (" + (vleft + 1) + ", " + (vright +1) +")." );
				myJson.put("Error", new Boolean(true));
			}

			myJson.put("Variable", v.toString());
			myJson.put("AsignacionVariable", av.toString());
			myJson.put("expression", (JSONObject) exp);
			RESULT = myJson;
		:}
		|
	procedure_statement: ps
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("procedure_statement", (JSONObject) ps);
			RESULT = myJson;
		:}
		|
	compound_statement: cs
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("compound_statement", (JSONObject) cs);
			RESULT = myJson;
		:}
		|
	write_function: w
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("write_function", (JSONObject) w);
			RESULT = myJson;
		:}
		|
	read_function: r
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("read_function", (JSONObject) r);
			RESULT = myJson;
		:}
		|
	If: i expression: exp Then: t statement: if_state Else: els statement: if_else_state
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("If", i.toString());
			myJson.put("expression", (JSONObject) exp);
			myJson.put("Then", t.toString());
			myJson.put("statement", (JSONObject) if_state);
			myJson.put("Else", els.toString());
			myJson.put("statement", (JSONObject) if_else_state);
			RESULT = myJson;
		:}
		|
	If error
		{:
			parser.report_error("Error en el If", null);
		:}
		|
	While: w expression: exp Do: d statement: state
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("While", w.toString());
			myJson.put("expression", (JSONObject) exp);
			myJson.put("Do", d.toString());
			myJson.put("statement", (JSONObject) state);
			RESULT = myJson;			
		:}
		|
	While error
		{:
			parser.report_error("Error en el While", null);
		:}
		|
	For: f Variable: v AsignacionVariable: av factor: fac To: to expression: exp Do: d statement: state
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("For", f.toString());
			myJson.put("Variable", v.toString());
			myJson.put("AsignacionVariable", av.toString());
			myJson.put("factor", (JSONObject) fac);
			myJson.put("To", to.toString());
			myJson.put("expression", (JSONObject) exp);
			myJson.put("Do", d.toString());
			myJson.put("statement", (JSONObject) state);
			RESULT = myJson;
		:}
		|
	For error
		{:
			parser.report_error("Error en el For", null);
		:}
		|
	Repeat:r statement: state Until: u Variable: v AsignacionIgual: ai expression: exp
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Repeat", r.toString());
			myJson.put("statement", (JSONObject) state);
			myJson.put("Until", u.toString());
			myJson.put("Variable", v.toString());
			myJson.put("AsignacionIgual", ai.toString());
			myJson.put("expression", (JSONObject) exp);
			RESULT = myJson;
		:}
		|
	Repeat error
		{:
			parser.report_error("Error en el Repeat", null);
		:}
	;
// \ statement //

// write_function //
write_function ::=
	Write: w ParentesisAbierto: pa constant_string: cs Coma: coma Variable: v ParentesisCerrado: pc
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Write", w.toString());
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("constant_string", cs.toString());
			myJson.put("Coma", coma.toString());
			myJson.put("Variable", v.toString());
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		:}
		|
	Write: w ParentesisAbierto: pa constant_string: cs ParentesisCerrado: pc
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Write", w.toString());
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("constant_string", cs.toString());
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		:}
	;
// \ write_function //

// read_function //
read_function ::=
	Read: r ParentesisAbierto: pa Variable: v ParentesisCerrado: pc
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Read", r.toString());
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("Variable",  v.toString());
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		:}
	;
// \ read_function //

// procedure_statement //
procedure_statement ::=
	Variable: v
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Variable", v.toString());
			RESULT = myJson;
		:}
		|
	Variable: v ParentesisAbierto: pa expression_list: el ParentesisCerrado: pc
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Variable", v.toString());
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("expression_list", (JSONObject) el);
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		:}
	;
// \ procedure_statement //

// expression_list //
expression_list ::=
	expression: exp extra_expression: ex_exp
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("expression", (JSONObject) exp);
			myJson.put("extra_expression", (JSONObject) ex_exp);
			RESULT = myJson;
		:}
	;
// \ expression_list //

// expression //
expression ::=
	expression: exp And: and relation: rel
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("expression", (JSONObject) exp);
			myJson.put("And", and.toString());
			myJson.put("relation", (JSONObject) rel);
			RESULT = myJson;
		:}
		|
	expression: exp Or: or relation: rel
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("expression", (JSONObject) exp);
			myJson.put("Or", or.toString());
			myJson.put("relation", (JSONObject) rel);
			RESULT = myJson;
		:}
		|
	relation: rel
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("relation", (JSONObject) rel);
			RESULT = myJson;
		:}
		|
	error
		{:
			parser.report_error("Error en la expresion", null);
		:}
	;
// \ expression //

// extra_expression //
extra_expression ::=
	Coma: coma expression: exp extra_expression: ex_exp
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("Coma", coma.toString());
			myJson.put("expression", (JSONObject) exp);
			myJson.put("extra_expression", (JSONObject) ex_exp);
			RESULT = myJson;
		:}
		|
		{:
			// Empty
		:}
	;
// \ extra_expression //

// relation //
relation ::=
	simple_expression: simp_exp
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			RESULT = myJson;
		:}
		|
	simple_expression: simp_exp OpRel: oprel simple_expression: simp_exp2
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			myJson.put("OpRel", oprel.toString());
			myJson.put("simple_expression", (JSONObject) simp_exp2);
			RESULT = myJson;
		:}
		|
	simple_expression: simp_exp AsignacionIgual: asignacion_igual simple_expression: simp_exp2
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			myJson.put("AsignacionIgual", asignacion_igual.toString());
			myJson.put("simple_expression", (JSONObject) simp_exp2);
			RESULT = myJson;
		:}
	;
// \ relation //

// simple_expression //
simple_expression ::=
	simple_expression: simp_exp OpSuma: opsuma mult_expression: mult_exp
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			myJson.put("OpSuma", opsuma.toString());
			myJson.put("mult_expression", (JSONObject) mult_exp);
			RESULT = myJson;
		:}
		|
	mult_expression: mult_exp
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("mult_expression", (JSONObject) mult_exp);
			RESULT = myJson;
		:}
	;
// \ simple_expression //

// mult_expression //
mult_expression ::=
	mult_expression: mult_exp OpMult: opmult factor: fac
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("mult_expression", (JSONObject) mult_exp);
			myJson.put("OpMult", opmult.toString());
			myJson.put("factor", (JSONObject) fac);
			RESULT = myJson;
		:}
		|
	factor: fac
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("factor", (JSONObject) fac);
			RESULT = myJson;
		:}
	;
// \ mult_expression //

// factor //
factor ::=
	Numero: numero
		{:
			JSONObject myJson = new JSONObject();
			current_type = "INTEGER";
			myJson.put("type", "INTEGER");
			myJson.put("value", new Integer(numero.toString()));
			
			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(new Integer(numero.toString()));
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		:}
		|
	Variable: v
		{:
			JSONObject myJson = new JSONObject();
			SymbolRow current_var = sym_table.find(v.toString(), current_scope);
			if(current_var == null) {
				errors.add("Error: No existe la variable " + v + " (" + (vleft + 1) + ", " + (vright +1) +")." );
				myJson.put("type", "UNKNOWN");
				myJson.put("error", new Boolean(true));
			} else {
				current_type = current_var.type.type;
				myJson.put("type", "INTEGER");
				JSONArray path = new JSONArray();
				for(Object value : current_var.scope.path) {
					path.add(value.toString());		
				}
				myJson.put("scope", path );
			}
			myJson.put("id", v.toString());

			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(v.toString());
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		:}
		|
	Not: not factor: fac
		{:		
			JSONObject myJson = new JSONObject();
			
			if(!current_type.equals("BOOLEAN")) {
				errors.add("Error: Intenta negar una expresión de tipo no BOOLEAN (" + (facleft + 1) + ", " + (facright +1) +")." );
				myJson.put("error", new Boolean(true));
			}
			myJson.put("type", current_type);

			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(not.toString());
			facts.add((JSONArray) ((JSONObject) fac).get("tree"));
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		:}
		|
	constant: cons
		{:
			JSONObject myJson = new JSONObject();

			current_type = cons.toString().toUpperCase();

			myJson.put("type", cons.toString().toUpperCase());

			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(cons.toString());
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		:}
		|
	ParentesisAbierto: pa expression_list: exp_list ParentesisCerrado: pc
		{:
			JSONObject myJson = new JSONObject();
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("expression_list", (JSONObject) exp_list);
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		:}
	;
// \ factor //

// constant //
constant ::=
	constant_character: cc
		{:
			RESULT = cc;
		:}
		|
	constant_string: cs
		{:
			RESULT = cs;
		:}
	;
// \ constant //

// constant_character //
constant_character ::=
	Constchar: c
		{:
			RESULT = c;
		:}
	;
// \ constant_character //

// constant_string //
constant_string ::=
	Conststr: c
		{:
			RESULT = c;
		:}
	;
// \ constant_string //

// final_instruccion_error //
final_instruccion_error ::=
	FinalInstruccion
		{:

		:}
		|
	error
		{:
			parser.report_error("Falta final de instruccion", null);
		:}
    ;
// \ final_instruccion_error //

// records //
records ::=
	Var Variable: v AsignacionIgual Record lista_record_values: lvr End
		{:
			ArrayList<Record_Attribute> attributes = (ArrayList<Record_Attribute> ) lvr;
			Token token = new Token(v, vright + 1, vleft + 1);
			RecordType type = new RecordType(token, attributes, vright + 1, vleft + 1);
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);
		 :}
	;
// \ records //

// lista_record_values //
lista_record_values ::=
	Variable: v AsignacionTipo Tipo: t FinalInstruccion lista_record_values: lrv
		{:
			ArrayList<Record_Attribute> attributes;
			if(lrv instanceof ArrayList) {
				attributes = (ArrayList<Record_Attribute> ) lrv;
			}
			attributes = new ArrayList();
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType  type = new CustomType(vright + 1, vleft + 1, t.toString());
			Record_Attribute attribute = new Record_Attribute(token, type);
			attributes.add(attribute);
			RESULT = attributes;
		:}
		|
		{:
			// Empty
		:}
	;
// \ lista_record_values //
