
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import org.json.simple.*;
import java.util.ArrayList;
import Arbol.*;
import Table.*;
import Types.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\043\002\000\002\002\012\000\002\002" +
    "\004\000\002\044\002\000\002\002\011\000\002\003\003" +
    "\000\002\003\005\000\002\004\010\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\010\000\002" +
    "\004\004\000\002\004\002\000\002\040\012\000\002\041" +
    "\012\000\002\042\012\000\002\007\003\000\002\007\002" +
    "\000\002\010\003\000\002\011\005\000\002\011\004\000" +
    "\002\011\002\000\002\005\005\000\002\012\010\000\002" +
    "\012\007\000\002\012\006\000\002\013\005\000\002\013" +
    "\002\000\002\014\005\000\002\014\007\000\002\045\002" +
    "\000\002\006\006\000\002\015\003\000\002\015\002\000" +
    "\002\016\004\000\002\016\004\000\002\016\005\000\002" +
    "\016\005\000\002\017\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\010" +
    "\000\002\017\004\000\002\017\006\000\002\017\004\000" +
    "\002\017\012\000\002\017\004\000\002\017\010\000\002" +
    "\017\004\000\002\031\010\000\002\031\006\000\002\032" +
    "\006\000\002\021\003\000\002\021\006\000\002\022\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\034\005\000\002\034\002\000\002" +
    "\033\003\000\002\033\005\000\002\033\005\000\002\030" +
    "\005\000\002\030\003\000\002\024\005\000\002\024\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\004\000" +
    "\002\023\003\000\002\023\005\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\027\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\010\000\002\037\007" +
    "\000\002\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\043\004\001\002\000\010\003\ufffe\033" +
    "\ufffe\040\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\uffff\001\002\000\006\003\013\033\012\001\002\000" +
    "\006\003\001\033\001\001\002\000\006\003\013\033\012" +
    "\001\002\000\016\003\uffb1\004\uffb1\007\uffb1\033\uffb1\045" +
    "\uffb1\047\uffb1\001\002\000\016\003\uffb0\004\uffb0\007\uffb0" +
    "\033\uffb0\045\uffb0\047\uffb0\001\002\000\016\003\ufff4\004" +
    "\ufff4\007\ufff4\033\ufff4\045\ufff4\047\ufff4\001\002\000\016" +
    "\003\ufff8\004\ufff8\007\ufff8\033\ufff8\045\ufff8\047\ufff8\001" +
    "\002\000\016\003\ufff7\004\ufff7\007\ufff7\033\ufff7\045\ufff7" +
    "\047\ufff7\001\002\000\016\003\ufff9\004\ufff9\007\ufff9\033" +
    "\ufff9\045\ufff9\047\ufff9\001\002\000\016\003\uffeb\004\uffeb" +
    "\007\uffeb\033\uffeb\045\uffeb\047\023\001\002\000\016\003" +
    "\ufff5\004\ufff5\007\ufff5\033\ufff5\045\ufff5\047\ufff5\001\002" +
    "\000\014\003\013\004\067\007\061\033\012\045\062\001" +
    "\002\000\004\040\024\001\002\000\012\003\ufffc\031\ufffc" +
    "\032\050\036\ufffc\001\002\000\010\003\027\031\030\036" +
    "\026\001\002\000\004\040\047\001\002\000\006\021\031" +
    "\033\uffef\001\002\000\010\021\031\032\uffef\033\uffef\001" +
    "\002\000\012\003\uffee\032\uffee\033\uffee\035\uffee\001\002" +
    "\000\010\032\ufff0\033\ufff0\035\ufff0\001\002\000\006\032" +
    "\035\033\034\001\002\000\016\003\ufffa\004\ufffa\007\ufffa" +
    "\033\ufffa\045\ufffa\047\ufffa\001\002\000\010\040\040\041" +
    "\041\046\036\001\002\000\004\033\044\001\002\000\004" +
    "\033\043\001\002\000\004\033\042\001\002\000\036\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\032\uffb3\033\uffb3\035\uffb3\036" +
    "\uffb3\001\002\000\016\003\ufff1\004\ufff1\007\ufff1\033\ufff1" +
    "\045\ufff1\047\ufff1\001\002\000\016\003\ufff3\004\ufff3\007" +
    "\ufff3\033\ufff3\045\ufff3\047\ufff3\001\002\000\016\003\ufff2" +
    "\004\ufff2\007\ufff2\033\ufff2\045\ufff2\047\ufff2\001\002\000" +
    "\004\033\046\001\002\000\016\003\ufff6\004\ufff6\007\ufff6" +
    "\033\ufff6\045\ufff6\047\ufff6\001\002\000\010\003\ufffb\031" +
    "\ufffb\036\ufffb\001\002\000\004\050\051\001\002\000\006" +
    "\005\uffad\040\052\001\002\000\004\031\055\001\002\000" +
    "\004\005\054\001\002\000\016\003\uffaf\004\uffaf\007\uffaf" +
    "\033\uffaf\045\uffaf\047\uffaf\001\002\000\004\021\056\001" +
    "\002\000\004\033\057\001\002\000\006\005\uffad\040\052" +
    "\001\002\000\004\005\uffae\001\002\000\004\040\250\001" +
    "\002\000\004\040\232\001\002\000\006\004\ufff4\047\ufff4" +
    "\001\002\000\004\037\227\001\002\000\006\003\013\033" +
    "\012\001\002\000\014\003\uffec\004\uffec\007\uffec\033\uffec" +
    "\045\uffec\001\002\000\026\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\016\uffe2\017\uffe2\020\uffe2\040\uffe2\044\uffe2" +
    "\001\002\000\026\003\103\004\067\005\uffdf\006\102\010" +
    "\075\016\074\017\105\020\100\040\073\044\077\001\002" +
    "\000\010\013\uffd7\015\uffd7\033\uffd7\001\002\000\010\013" +
    "\uffd6\015\uffd6\033\uffd6\001\002\000\014\013\uffca\015\uffca" +
    "\030\222\033\uffca\034\221\001\002\000\020\003\216\022" +
    "\134\034\133\040\131\041\041\042\116\046\140\001\002" +
    "\000\020\003\210\022\134\034\133\040\131\041\041\042" +
    "\116\046\140\001\002\000\010\013\uffd9\015\uffd9\033\uffd9" +
    "\001\002\000\024\003\201\004\067\006\102\010\075\016" +
    "\074\017\105\020\100\040\073\044\077\001\002\000\004" +
    "\034\176\001\002\000\010\013\uffd8\015\uffd8\033\uffd8\001" +
    "\002\000\006\003\126\040\127\001\002\000\004\033\125" +
    "\001\002\000\004\033\124\001\002\000\004\034\115\001" +
    "\002\000\004\005\114\001\002\000\026\003\111\004\067" +
    "\005\uffe0\006\102\010\075\016\074\017\105\020\100\040" +
    "\073\044\077\001\002\000\004\033\113\001\002\000\004" +
    "\033\112\001\002\000\026\003\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\010\uffdb\016\uffdb\017\uffdb\020\uffdb\040\uffdb\044\uffdb" +
    "\001\002\000\026\003\uffdc\004\uffdc\005\uffdc\006\uffdc\010" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\040\uffdc\044\uffdc\001\002" +
    "\000\014\003\uffe1\013\uffe1\015\uffe1\033\uffe1\037\uffe1\001" +
    "\002\000\004\042\116\001\002\000\036\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\001\002" +
    "\000\006\035\120\036\121\001\002\000\010\013\uffcc\015" +
    "\uffcc\033\uffcc\001\002\000\004\040\122\001\002\000\004" +
    "\035\123\001\002\000\010\013\uffcd\015\uffcd\033\uffcd\001" +
    "\002\000\026\003\uffde\004\uffde\005\uffde\006\uffde\010\uffde" +
    "\016\uffde\017\uffde\020\uffde\040\uffde\044\uffde\001\002\000" +
    "\026\003\uffdd\004\uffdd\005\uffdd\006\uffdd\010\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\040\uffdd\044\uffdd\001\002\000\010\013" +
    "\uffd0\015\uffd0\033\uffd0\001\002\000\004\030\130\001\002" +
    "\000\016\022\134\034\133\040\131\041\041\042\116\046" +
    "\140\001\002\000\036\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\032" +
    "\uffb9\033\uffb9\035\uffb9\036\uffb9\001\002\000\036\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4" +
    "\001\002\000\020\003\146\022\134\034\133\040\131\041" +
    "\041\042\116\046\140\001\002\000\016\022\134\034\133" +
    "\040\131\041\041\042\116\046\140\001\002\000\036\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\032\uffb5\033\uffb5\035\uffb5\036" +
    "\uffb5\001\002\000\036\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\001\002\000\004\011\141" +
    "\001\002\000\036\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\032\uffba" +
    "\033\uffba\035\uffba\036\uffba\001\002\000\020\003\146\022" +
    "\134\034\133\040\131\041\041\042\116\046\140\001\002" +
    "\000\024\012\uffc5\013\uffc5\014\uffc5\015\uffc5\023\uffc5\024" +
    "\uffc5\033\uffc5\035\uffc5\036\uffc5\001\002\000\034\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\155\032\uffbd\033\uffbd\035\uffbd\036\uffbd\001\002" +
    "\000\010\012\160\023\162\024\161\001\002\000\032\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\023\uffc1\024\uffc1\025\150" +
    "\026\151\032\152\033\uffc1\035\uffc1\036\uffc1\001\002\000" +
    "\022\012\uffc4\013\uffc4\015\uffc4\023\uffc4\024\uffc4\033\uffc4" +
    "\035\uffc4\036\uffc4\001\002\000\034\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\032\uffbb\033\uffbb\035\uffbb\036\uffbb\001\002\000\016\022" +
    "\134\034\133\040\131\041\041\042\116\046\140\001\002" +
    "\000\016\022\134\034\133\040\131\041\041\042\116\046" +
    "\140\001\002\000\016\022\134\034\133\040\131\041\041" +
    "\042\116\046\140\001\002\000\026\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\023\uffbf\024\uffbf\026\151\033\uffbf\035\uffbf" +
    "\036\uffbf\001\002\000\034\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\155\032\uffbe" +
    "\033\uffbe\035\uffbe\036\uffbe\001\002\000\016\022\134\034" +
    "\133\040\131\041\041\042\116\046\140\001\002\000\034" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc" +
    "\001\002\000\026\012\uffc0\013\uffc0\014\uffc0\015\uffc0\023" +
    "\uffc0\024\uffc0\026\151\033\uffc0\035\uffc0\036\uffc0\001\002" +
    "\000\022\004\067\006\102\010\075\016\074\017\105\020" +
    "\100\040\073\044\077\001\002\000\016\022\134\034\133" +
    "\040\131\041\041\042\116\046\140\001\002\000\016\022" +
    "\134\034\133\040\131\041\041\042\116\046\140\001\002" +
    "\000\024\012\uffc6\013\uffc6\014\uffc6\015\uffc6\023\uffc6\024" +
    "\uffc6\033\uffc6\035\uffc6\036\uffc6\001\002\000\024\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\023\uffc7\024\uffc7\033\uffc7\035" +
    "\uffc7\036\uffc7\001\002\000\010\013\uffd1\015\uffd1\033\uffd1" +
    "\001\002\000\036\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\032\uffb8" +
    "\033\uffb8\035\uffb8\036\uffb8\001\002\000\012\023\162\024" +
    "\161\035\uffc2\036\172\001\002\000\004\035\171\001\002" +
    "\000\036\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\032\uffb6\033\uffb6" +
    "\035\uffb6\036\uffb6\001\002\000\020\003\146\022\134\034" +
    "\133\040\131\041\041\042\116\046\140\001\002\000\004" +
    "\035\uffc8\001\002\000\012\023\162\024\161\035\uffc2\036" +
    "\172\001\002\000\004\035\uffc3\001\002\000\004\040\177" +
    "\001\002\000\004\035\200\001\002\000\010\013\uffcb\015" +
    "\uffcb\033\uffcb\001\002\000\010\013\uffce\015\uffce\033\uffce" +
    "\001\002\000\004\015\203\001\002\000\004\040\204\001" +
    "\002\000\004\032\205\001\002\000\020\003\146\022\134" +
    "\034\133\040\131\041\041\042\116\046\140\001\002\000" +
    "\014\013\uffcf\015\uffcf\023\162\024\161\033\uffcf\001\002" +
    "\000\010\014\211\023\162\024\161\001\002\000\016\013" +
    "\uffd4\014\uffc4\015\uffd4\023\uffc4\024\uffc4\033\uffd4\001\002" +
    "\000\022\004\067\006\102\010\075\016\074\017\105\020" +
    "\100\040\073\044\077\001\002\000\004\013\213\001\002" +
    "\000\022\004\067\006\102\010\075\016\074\017\105\020" +
    "\100\040\073\044\077\001\002\000\010\013\uffd5\015\uffd5" +
    "\033\uffd5\001\002\000\010\012\217\023\162\024\161\001" +
    "\002\000\016\012\uffc4\013\uffd2\015\uffd2\023\uffc4\024\uffc4" +
    "\033\uffd2\001\002\000\022\004\067\006\102\010\075\016" +
    "\074\017\105\020\100\040\073\044\077\001\002\000\010" +
    "\013\uffd3\015\uffd3\033\uffd3\001\002\000\020\003\146\022" +
    "\134\034\133\040\131\041\041\042\116\046\140\001\002" +
    "\000\020\003\146\022\134\034\133\040\131\041\041\042" +
    "\116\046\140\001\002\000\014\013\uffda\015\uffda\023\162" +
    "\024\161\033\uffda\001\002\000\004\035\225\001\002\000" +
    "\010\013\uffc9\015\uffc9\033\uffc9\001\002\000\014\003\uffed" +
    "\004\uffed\007\uffed\033\uffed\045\uffed\001\002\000\004\002" +
    "\000\001\002\000\006\004\067\047\023\001\002\000\006" +
    "\003\uffea\033\uffea\001\002\000\006\033\uffe5\034\233\001" +
    "\002\000\004\040\236\001\002\000\004\033\235\001\002" +
    "\000\006\004\uffe7\047\uffe7\001\002\000\006\031\ufffc\036" +
    "\ufffc\001\002\000\006\031\246\036\026\001\002\000\006" +
    "\033\242\035\241\001\002\000\006\031\uffe6\033\uffe6\001" +
    "\002\000\004\040\236\001\002\000\006\031\244\036\026" +
    "\001\002\000\010\021\031\033\uffef\035\uffef\001\002\000" +
    "\006\033\uffe3\035\uffe3\001\002\000\010\021\031\033\uffef" +
    "\035\uffef\001\002\000\006\033\uffe4\035\uffe4\001\002\000" +
    "\006\031\uffe5\034\233\001\002\000\004\031\252\001\002" +
    "\000\010\003\013\021\031\033\012\001\002\000\006\003" +
    "\013\033\012\001\002\000\006\004\uffe8\047\uffe8\001\002" +
    "\000\006\004\uffe9\047\uffe9\001\002\000\016\003\ufff4\004" +
    "\ufff4\007\ufff4\033\ufff4\045\ufff4\047\ufff4\001\002\000\016" +
    "\003\uffeb\004\uffeb\007\uffeb\033\uffeb\045\uffeb\047\023\001" +
    "\002\000\014\003\013\004\067\007\061\033\012\045\062" +
    "\001\002\000\004\037\262\001\002\000\004\002\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\002\004\001\001\000\004\044\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\255" +
    "\001\001\000\004\043\010\001\001\000\004\035\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\017" +
    "\040\016\041\014\042\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\021\036\020" +
    "\001\001\000\002\001\001\000\012\005\064\006\063\012" +
    "\062\035\065\001\001\000\004\003\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\044\010\031\001\001\000\006\007\032\010\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\227\040\016\041" +
    "\014\042\015\001\001\000\002\001\001\000\004\035\225" +
    "\001\001\000\002\001\001\000\004\045\067\001\001\000" +
    "\020\006\100\015\105\016\106\017\103\021\075\031\070" +
    "\032\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\214\023\146\024\142\025\135" +
    "\026\134\027\131\030\144\033\141\001\001\000\022\020" +
    "\206\023\146\024\142\025\135\026\134\027\131\030\144" +
    "\033\141\001\001\000\002\001\001\000\014\006\100\017" +
    "\201\021\075\031\070\032\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\100\017\107\021\075\031\070\032\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\136\025\135\026\134\027\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\020\166\022\167" +
    "\023\146\024\142\025\135\026\134\027\131\030\144\033" +
    "\141\001\001\000\012\023\165\025\135\026\134\027\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\143\023\146\024\142" +
    "\025\135\026\134\027\131\030\144\033\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\146\024\142\025\135\026\134\027\131\030\156\001\001" +
    "\000\014\023\146\024\153\025\135\026\134\027\131\001" +
    "\001\000\016\023\146\024\142\025\135\026\134\027\131" +
    "\030\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\155\025\135\026\134\027\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\100\017\164\021" +
    "\075\031\070\032\071\001\001\000\020\023\146\024\142" +
    "\025\135\026\134\027\131\030\144\033\163\001\001\000" +
    "\020\023\146\024\142\025\135\026\134\027\131\030\144" +
    "\033\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\173\023" +
    "\146\024\142\025\135\026\134\027\131\030\144\033\141" +
    "\001\001\000\002\001\001\000\004\034\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\205\023\146\024\142" +
    "\025\135\026\134\027\131\030\144\033\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\100\017\211\021\075\031\070\032\071\001\001\000" +
    "\002\001\001\000\014\006\100\017\213\021\075\031\070" +
    "\032\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\100\017\217\021\075\031\070" +
    "\032\071\001\001\000\002\001\001\000\024\020\166\022" +
    "\223\023\146\024\142\025\135\026\134\027\131\030\144" +
    "\033\141\001\001\000\022\020\222\023\146\024\142\025" +
    "\135\026\134\027\131\030\144\033\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\230\036\020\001\001" +
    "\000\002\001\001\000\004\013\233\001\001\000\006\003" +
    "\236\014\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\242\001\001\000\002\001\001" +
    "\000\006\007\244\010\031\001\001\000\002\001\001\000" +
    "\006\007\246\010\031\001\001\000\002\001\001\000\004" +
    "\013\250\001\001\000\002\001\001\000\006\010\252\035" +
    "\253\001\001\000\004\035\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\256\040\016\041\014\042" +
    "\015\001\001\000\006\011\257\036\020\001\001\000\012" +
    "\005\064\006\260\012\062\035\065\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public ArrayList<String> errors = new ArrayList(); 
	public int offset = 0;
	public ArrayList current_scope = new ArrayList();

	public String Intermediate_code = "";
	public SymbolTable sym_table = new SymbolTable();
	public String current_type = "";
	public String current_operator = "";

	public Node myTree = new Node("INIT");


	public Node getMyTree(){
		return myTree;
	}

	public void backScope() {		
		if(current_scope.size() > 0) {				
			current_scope.remove(current_scope.size()-1);
		}
	}

	public void report_error(String message, Object info) {
		if (info instanceof Symbol) {
			if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
				int line = (((Symbol)info).left)+1;
				int column = (((Symbol)info).right)+1;
				System.out.println(message + " " + " (line "+line+", column "+column+")");
			}
		}
		System.out.println(message);
	}
	public void syntax_error(Symbol s){
		String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
		//errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
		System.out.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
	}

	public void unrecovered_syntax_error(Symbol s) {
		if (s.left < 1 ||s.left < 1) return;
		String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
		//errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
		System.out.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);

	}

	public String getTokenName(int id){
		String value = sym.terminalNames[id];
		switch(id) {
			case sym.ParentesisAbierto:
				return "(";
			case sym.ParentesisCerrado:
				return ")";
			case sym.Coma:
				return ",";
			case sym.AsignacionTipo:
				return ":";
			case sym.AsignacionVariable:
				return ":=";
			case sym.FinalInstruccion:
				return ";";
			case sym.For:
				return "for";
			case sym.While:
				return "while";
			case sym.Repeat:
				return "repeat";
			case sym.If:
				return "if";
			case sym.AsignacionIgual:
				return "=";	
			default:
				return value;  
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			current_scope.add(v);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= Program Variable NT$0 final_instruccion_error declarations subprogram_declarations compound_statement Punto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
			if(errors.size() == 0) {
				System.out.println("COMPILADO CON EXITO");				
			} else {
				for(String error : errors){
					System.out.println(error);
				}
				System.out.println("\t\t--- COMPILACIÓN FALLIDA ---");
			}

			//backScope();
			
			System.out.println(sym_table);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;

			current_scope.add("ROOT");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= Program NT$1 final_instruccion_error declarations subprogram_declarations compound_statement Punto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			if(errors.size() == 0) {
				System.out.println("COMPILADO CON EXITO");				
			} else {
				for(String error : errors){
					System.out.println(error);
				}
				System.out.println("\t\t--- COMPILACIÓN FALLIDA ---");
			}

			//backScope();

			System.out.println(sym_table);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier_list ::= Variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ArrayList ids = new ArrayList();
			Token token = new Token(v.toString(), vright + 1, vleft + 1);
			ids.add(token);
			RESULT = ids;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier_list ::= identifier_list Coma Variable 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ArrayList ids = (ArrayList) idl;
			Token token = new Token(v.toString(), vright + 1, vleft + 1);
			ids.add(token);
			RESULT = ids;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarations ::= declarations Var identifier_list AsignacionTipo type FinalInstruccion 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations ::= char_declaration 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarations ::= integer_declaration 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarations ::= boolean_declaration 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarations ::= declarations Var identifier_list error type FinalInstruccion 
            {
              Object RESULT =null;
		
			 parser.report_error("Error en la asignacion de tipo", null); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= declarations records 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // char_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual constant_character FinalInstruccion 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // integer_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual Numero FinalInstruccion 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolean_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual Variable FinalInstruccion 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			ArrayList ids = ((ArrayList) idl);
			for(int i = 0; i < ids.size(); i++) {
				Token token = (Token)ids.get(i);
				CustomType type = new CustomType(tright + 1, tleft + 1, t.toString());
				Scope scope = new Scope(current_scope.clone());
				SymbolRow sr = new SymbolRow(token, type, scope, offset);
				offset++;
				sym_table.addSymbol(sr);
			}
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_declaration",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= standard_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = t;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // standard_type ::= Tipo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = t;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standard_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // subprogram_declarations ::= subprogram_declarations subprogram_declaration final_instruccion_error 
            {
              Object RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // subprogram_declarations ::= subprogram_declarations final_instruccion_error 
            {
              Object RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // subprogram_declarations ::= 
            {
              Object RESULT =null;
					
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subprogram_declaration ::= subprogram_head declarations compound_statement 
            {
              Object RESULT =null;
		
			backScope();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // subprogram_head ::= Function Variable arguments AsignacionTipo standard_type final_instruccion_error 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType type = new CustomType(pright + 1, pleft + 1, p.toString());
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);

			current_scope.add(v);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_head",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // subprogram_head ::= Function Variable arguments AsignacionTipo final_instruccion_error 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType type = new CustomType(pright + 1, pleft + 1, p.toString());
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);

			current_scope.add(v);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_head",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // subprogram_head ::= Procedure Variable arguments FinalInstruccion 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType type = new CustomType(pright + 1, pleft + 1, p.toString());
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);

			current_scope.add(v);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_head",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arguments ::= ParentesisAbierto parameter_list ParentesisCerrado 
            {
              Object RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arguments ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter_list ::= identifier_list AsignacionTipo type 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_list ::= parameter_list FinalInstruccion identifier_list AsignacionTipo type 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$2 ::= 
            {
              Object RESULT =null;

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // compound_statement ::= Begin NT$2 optional_statements End 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optional_statements ::= statement_list 
            {
              Object RESULT =null;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object state_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			//System.out.println("LIST2: " + state_list);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optional_statements ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_list ::= statement FinalInstruccion 
            {
              Object RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			ArrayList n = new ArrayList();
			
			n.add(state);

			RESULT = n;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_list ::= error FinalInstruccion 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el statement", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_list ::= statement_list statement FinalInstruccion 
            {
              Object RESULT =null;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object state_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			//System.out.println("LIST: " + state_list);
			ArrayList n = new ArrayList();
			
			n.add(state);
			n.addAll((ArrayList)state_list);

			RESULT = n;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement_list ::= statement_list error FinalInstruccion 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el statement", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= Variable AsignacionVariable expression 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			SymbolRow current_var = sym_table.find(v.toString(), current_scope);
			if(current_var == null) {
				errors.add("Error: No existe la variable " + v + " (" + (vleft + 1) + ", " + (vright +1) +")." );
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= procedure_statement 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println(ps);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= compound_statement 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= write_function 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= read_function 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= If expression Then statement Else statement 
            {
              Object RESULT =null;
		int if_stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int if_stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object if_state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int if_else_stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if_else_stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object if_else_state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= If error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el If", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= While expression Do statement 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= While error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el While", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= For Variable AsignacionVariable factor To expression Do statement 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= For error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el For", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= Repeat statement Until Variable AsignacionIgual expression 
            {
              Object RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= Repeat error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el Repeat", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write_function ::= Write ParentesisAbierto constant_string Coma Variable ParentesisCerrado 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // write_function ::= Write ParentesisAbierto constant_string ParentesisCerrado 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // read_function ::= Read ParentesisAbierto Variable ParentesisCerrado 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_function",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedure_statement ::= Variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("Variable", v.toString());
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // procedure_statement ::= Variable ParentesisAbierto expression_list ParentesisCerrado 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("Variable", v.toString());
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("expression_list", (JSONObject) el);
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression_list ::= expression extra_expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("expression", (JSONObject) exp);
			myJson.put("extra_expression", (JSONObject) ex_exp);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression And relation 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("expression", (JSONObject) exp);
			myJson.put("And", and.toString());
			myJson.put("relation", (JSONObject) rel);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression Or relation 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("expression", (JSONObject) exp);
			myJson.put("Or", or.toString());
			myJson.put("relation", (JSONObject) rel);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= relation 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("relation", (JSONObject) rel);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en la expresion", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // extra_expression ::= Coma expression extra_expression 
            {
              Object RESULT =null;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("Coma", coma.toString());
			myJson.put("expression", (JSONObject) exp);
			myJson.put("extra_expression", (JSONObject) ex_exp);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // extra_expression ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relation ::= simple_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relation ::= simple_expression OpRel simple_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simp_exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simp_exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simp_exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			myJson.put("OpRel", oprel.toString());
			myJson.put("simple_expression", (JSONObject) simp_exp2);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relation ::= simple_expression AsignacionIgual simple_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asignacion_igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asignacion_igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asignacion_igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simp_exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simp_exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simp_exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			myJson.put("AsignacionIgual", asignacion_igual.toString());
			myJson.put("simple_expression", (JSONObject) simp_exp2);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_expression ::= simple_expression OpSuma mult_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opsumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opsuma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mult_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mult_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mult_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("simple_expression", (JSONObject) simp_exp);
			myJson.put("OpSuma", opsuma.toString());
			myJson.put("mult_expression", (JSONObject) mult_exp);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_expression ::= mult_expression 
            {
              Object RESULT =null;
		int mult_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mult_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mult_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("mult_expression", (JSONObject) mult_exp);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mult_expression ::= mult_expression OpMult factor 
            {
              Object RESULT =null;
		int mult_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mult_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mult_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opmultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opmult = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("mult_expression", (JSONObject) mult_exp);
			myJson.put("OpMult", opmult.toString());
			myJson.put("factor", (JSONObject) fac);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mult_expression ::= factor 
            {
              Object RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("factor", (JSONObject) fac);
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= Numero 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			current_type = "INTEGER";
			myJson.put("type", "INTEGER");
			myJson.put("value", new Integer(numero.toString()));
			
			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(new Integer(numero.toString()));
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= Variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			SymbolRow current_var = sym_table.find(v.toString(), current_scope);
			if(current_var == null) {
				errors.add("Error: No existe la variable " + v + " (" + (vleft + 1) + ", " + (vright +1) +")." );
				myJson.put("type", "UNKNOWN");
				myJson.put("error", new Boolean(true));
			} else {
				current_type = current_var.type.type;
				myJson.put("type", "INTEGER");
				JSONArray path = new JSONArray();
				for(Object value : current_var.scope.path) {
					path.add(value.toString());		
				}
				myJson.put("scope", path );
			}
			myJson.put("id", v.toString());

			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(v.toString());
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= Not factor 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
			JSONObject myJson = new JSONObject();
			
			if(!current_type.equals("BOOLEAN")) {
				errors.add("Error: Intenta negar una expresión de tipo no BOOLEAN (" + (facleft + 1) + ", " + (facright +1) +")." );
				myJson.put("error", new Boolean(true));
			}
			myJson.put("type", current_type);

			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(not.toString());
			facts.add((JSONArray) ((JSONObject) fac).get("tree"));
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= constant 
            {
              Object RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();

			current_type = cons.toString().toUpperCase();

			myJson.put("type", cons.toString().toUpperCase());

			// Para el arbol
			JSONArray facts = new JSONArray();
			facts.add(cons.toString());
			myJson.put("tree", facts);
			//

			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= ParentesisAbierto expression_list ParentesisCerrado 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			JSONObject myJson = new JSONObject();
			myJson.put("ParentesisAbierto", pa.toString());
			myJson.put("expression_list", (JSONObject) exp_list);
			myJson.put("ParentesisCerrado", pc.toString());
			RESULT = myJson;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // constant ::= constant_character 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = cc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // constant ::= constant_string 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = cs;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // constant_character ::= Constchar 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_character",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // constant_string ::= Conststr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_string",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // final_instruccion_error ::= FinalInstruccion 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_instruccion_error",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // final_instruccion_error ::= error 
            {
              Object RESULT =null;
		
			parser.report_error("Falta final de instruccion", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_instruccion_error",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // records ::= Var Variable AsignacionIgual Record lista_record_values End 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lvrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lvr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			ArrayList<Record_Attribute> attributes = (ArrayList<Record_Attribute> ) lvr;
			Token token = new Token(v, vright + 1, vleft + 1);
			RecordType type = new RecordType(token, attributes, vright + 1, vleft + 1);
			Scope scope = new Scope(current_scope.clone());
			SymbolRow sr = new SymbolRow(token, type, scope, offset);
			offset++;
			sym_table.addSymbol(sr);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("records",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_record_values ::= Variable AsignacionTipo Tipo FinalInstruccion lista_record_values 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lrvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lrvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lrv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ArrayList<Record_Attribute> attributes;
			if(lrv instanceof ArrayList) {
				attributes = (ArrayList<Record_Attribute> ) lrv;
			}
			attributes = new ArrayList();
			Token token = new Token(v, vright + 1, vleft + 1);
			CustomType  type = new CustomType(vright + 1, vleft + 1, t.toString());
			Record_Attribute attribute = new Record_Attribute(token, type);
			attributes.add(attribute);
			RESULT = attributes;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record_values",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_record_values ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record_values",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
