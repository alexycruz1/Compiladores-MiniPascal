
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Arbol.*;
import Table.*;
import Types.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\011\000\002\002\004\000\002\002" +
    "\010\000\002\003\003\000\002\003\005\000\002\004\010" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\010\000\002\004\004\000\002\004\002\000\002" +
    "\042\012\000\002\043\012\000\002\044\012\000\002\007" +
    "\003\000\002\007\002\000\002\010\003\000\002\011\005" +
    "\000\002\011\004\000\002\011\002\000\002\005\005\000" +
    "\002\012\010\000\002\012\007\000\002\012\006\000\002" +
    "\013\005\000\002\013\002\000\002\014\005\000\002\014" +
    "\007\000\002\006\005\000\002\015\003\000\002\015\002" +
    "\000\002\016\004\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\010\000\002\017\004\000\002\017\006\000\002\017\004" +
    "\000\002\017\012\000\002\017\004\000\002\017\010\000" +
    "\002\017\004\000\002\033\010\000\002\033\006\000\002" +
    "\034\006\000\002\031\004\000\002\022\004\000\002\022" +
    "\002\000\002\021\003\000\002\021\006\000\002\023\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\036\005\000\002\036\002\000\002" +
    "\035\003\000\002\035\005\000\002\035\005\000\002\032" +
    "\005\000\002\032\003\000\002\025\005\000\002\025\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\003\000\002\024\005\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\030\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\010\000\002\041\007" +
    "\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\004\043\004\001\002\000\010\003\010\033" +
    "\007\040\011\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\016\003\uffb1\004\uffb1\007\uffb1\033" +
    "\uffb1\045\uffb1\047\uffb1\001\002\000\016\003\uffb0\004\uffb0" +
    "\007\uffb0\033\uffb0\045\uffb0\047\uffb0\001\002\000\006\003" +
    "\010\033\007\001\002\000\016\003\ufff6\004\ufff6\007\ufff6" +
    "\033\ufff6\045\ufff6\047\ufff6\001\002\000\016\003\ufffa\004" +
    "\ufffa\007\ufffa\033\ufffa\045\ufffa\047\ufffa\001\002\000\016" +
    "\003\ufff9\004\ufff9\007\ufff9\033\ufff9\045\ufff9\047\ufff9\001" +
    "\002\000\016\003\ufffb\004\ufffb\007\ufffb\033\ufffb\045\ufffb" +
    "\047\ufffb\001\002\000\016\003\uffed\004\uffed\007\uffed\033" +
    "\uffed\045\uffed\047\021\001\002\000\016\003\ufff7\004\ufff7" +
    "\007\ufff7\033\ufff7\045\ufff7\047\ufff7\001\002\000\014\003" +
    "\010\004\065\007\057\033\007\045\060\001\002\000\004" +
    "\040\022\001\002\000\012\003\ufffe\031\ufffe\032\046\036" +
    "\ufffe\001\002\000\010\003\025\031\026\036\024\001\002" +
    "\000\004\040\045\001\002\000\006\021\027\033\ufff1\001" +
    "\002\000\010\021\027\032\ufff1\033\ufff1\001\002\000\012" +
    "\003\ufff0\032\ufff0\033\ufff0\035\ufff0\001\002\000\010\032" +
    "\ufff2\033\ufff2\035\ufff2\001\002\000\006\032\033\033\032" +
    "\001\002\000\016\003\ufffc\004\ufffc\007\ufffc\033\ufffc\045" +
    "\ufffc\047\ufffc\001\002\000\010\040\036\041\037\046\034" +
    "\001\002\000\004\033\042\001\002\000\004\033\041\001" +
    "\002\000\004\033\040\001\002\000\056\003\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\046" +
    "\uffb3\001\002\000\016\003\ufff3\004\ufff3\007\ufff3\033\ufff3" +
    "\045\ufff3\047\ufff3\001\002\000\016\003\ufff5\004\ufff5\007" +
    "\ufff5\033\ufff5\045\ufff5\047\ufff5\001\002\000\016\003\ufff4" +
    "\004\ufff4\007\ufff4\033\ufff4\045\ufff4\047\ufff4\001\002\000" +
    "\004\033\044\001\002\000\016\003\ufff8\004\ufff8\007\ufff8" +
    "\033\ufff8\045\ufff8\047\ufff8\001\002\000\010\003\ufffd\031" +
    "\ufffd\036\ufffd\001\002\000\004\050\047\001\002\000\006" +
    "\005\uffad\040\050\001\002\000\004\031\053\001\002\000" +
    "\004\005\052\001\002\000\016\003\uffaf\004\uffaf\007\uffaf" +
    "\033\uffaf\045\uffaf\047\uffaf\001\002\000\004\021\054\001" +
    "\002\000\004\033\055\001\002\000\006\005\uffad\040\050" +
    "\001\002\000\004\005\uffae\001\002\000\004\040\251\001" +
    "\002\000\004\040\233\001\002\000\006\004\ufff6\047\ufff6" +
    "\001\002\000\004\037\230\001\002\000\006\003\010\033" +
    "\007\001\002\000\014\003\uffee\004\uffee\007\uffee\033\uffee" +
    "\045\uffee\001\002\000\026\003\102\004\065\005\uffe2\006" +
    "\100\010\072\016\073\017\103\020\076\040\070\044\075" +
    "\001\002\000\010\013\uffda\015\uffda\033\uffda\001\002\000" +
    "\010\013\uffd9\015\uffd9\033\uffd9\001\002\000\030\003\144" +
    "\013\uffca\015\uffca\022\132\030\uffcb\033\uffca\034\221\040" +
    "\127\041\037\042\114\046\136\001\002\000\010\013\uffdc" +
    "\015\uffdc\033\uffdc\001\002\000\020\003\214\022\132\034" +
    "\131\040\127\041\037\042\114\046\136\001\002\000\020" +
    "\003\210\022\132\034\131\040\127\041\037\042\114\046" +
    "\136\001\002\000\004\030\205\001\002\000\024\003\200" +
    "\004\065\006\100\010\072\016\073\017\103\020\076\040" +
    "\070\044\075\001\002\000\004\034\174\001\002\000\010" +
    "\013\uffdb\015\uffdb\033\uffdb\001\002\000\006\003\124\040" +
    "\125\001\002\000\004\033\123\001\002\000\004\033\122" +
    "\001\002\000\004\034\113\001\002\000\004\005\112\001" +
    "\002\000\026\003\107\004\065\005\uffe3\006\100\010\072" +
    "\016\073\017\103\020\076\040\070\044\075\001\002\000" +
    "\004\033\111\001\002\000\004\033\110\001\002\000\026" +
    "\003\uffde\004\uffde\005\uffde\006\uffde\010\uffde\016\uffde\017" +
    "\uffde\020\uffde\040\uffde\044\uffde\001\002\000\026\003\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\010\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\040\uffdf\044\uffdf\001\002\000\014\003\uffe4\013\uffe4" +
    "\015\uffe4\033\uffe4\037\uffe4\001\002\000\004\042\114\001" +
    "\002\000\056\003\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\046\uffb2\001\002\000\006\035" +
    "\116\036\117\001\002\000\010\013\uffcf\015\uffcf\033\uffcf" +
    "\001\002\000\004\040\120\001\002\000\004\035\121\001" +
    "\002\000\010\013\uffd0\015\uffd0\033\uffd0\001\002\000\026" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\010\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\040\uffe0\044\uffe0\001\002\000\026\003\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\010\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\040\uffe1\044\uffe1\001\002\000\010\013\uffd3\015\uffd3" +
    "\033\uffd3\001\002\000\004\030\126\001\002\000\016\022" +
    "\132\034\131\040\127\041\037\042\114\046\136\001\002" +
    "\000\056\003\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\046\uffb9\001\002\000\056\003\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\046\uffb4\001\002\000\020\003\144\022\132\034\131" +
    "\040\127\041\037\042\114\046\136\001\002\000\016\022" +
    "\132\034\131\040\127\041\037\042\114\046\136\001\002" +
    "\000\056\003\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\046\uffb5\001\002\000\056\003\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\046\uffb7\001\002\000\004\011\137\001\002\000\056" +
    "\003\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\040\uffba\041" +
    "\uffba\042\uffba\046\uffba\001\002\000\020\003\144\022\132" +
    "\034\131\040\127\041\037\042\114\046\136\001\002\000" +
    "\044\003\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\030\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\046\uffc5\001\002\000\054" +
    "\003\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\153\030\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\046\uffbd\001\002\000\010\012\157\023\160\024\156" +
    "\001\002\000\052\003\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\146\026\147\030\uffc1" +
    "\032\150\033\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\046\uffc1\001\002\000\042\003\uffc4\012\uffc4" +
    "\013\uffc4\015\uffc4\022\uffc4\023\uffc4\024\uffc4\030\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\046\uffc4\001\002\000\054\003\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\046\uffbb\001\002\000\016" +
    "\022\132\034\131\040\127\041\037\042\114\046\136\001" +
    "\002\000\016\022\132\034\131\040\127\041\037\042\114" +
    "\046\136\001\002\000\016\022\132\034\131\040\127\041" +
    "\037\042\114\046\136\001\002\000\046\003\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\147\030\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\046\uffbf\001\002\000\054\003\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\153\030\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe\046\uffbe" +
    "\001\002\000\016\022\132\034\131\040\127\041\037\042" +
    "\114\046\136\001\002\000\054\003\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\040\uffbc\041\uffbc\042\uffbc\046\uffbc\001\002\000" +
    "\046\003\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\026\147\030\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\046\uffc0\001\002" +
    "\000\016\022\132\034\131\040\127\041\037\042\114\046" +
    "\136\001\002\000\022\004\065\006\100\010\072\016\073" +
    "\017\103\020\076\040\070\044\075\001\002\000\016\022" +
    "\132\034\131\040\127\041\037\042\114\046\136\001\002" +
    "\000\044\003\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\030\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\040\uffc6\041\uffc6\042\uffc6\046\uffc6\001\002\000" +
    "\010\013\uffd4\015\uffd4\033\uffd4\001\002\000\044\003\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\030\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\046\uffc7\001\002\000\056\003\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\046\uffb8\001\002\000\012\023\160\024\156\035\uffc2\036" +
    "\170\001\002\000\004\035\167\001\002\000\056\003\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\046\uffb6\001\002\000\020\003\144\022\132\034\131" +
    "\040\127\041\037\042\114\046\136\001\002\000\004\035" +
    "\uffc8\001\002\000\012\023\160\024\156\035\uffc2\036\170" +
    "\001\002\000\004\035\uffc3\001\002\000\004\040\175\001" +
    "\002\000\004\035\176\001\002\000\010\013\uffce\015\uffce" +
    "\033\uffce\001\002\000\004\015\201\001\002\000\010\013" +
    "\uffd1\015\uffd1\033\uffd1\001\002\000\004\040\202\001\002" +
    "\000\004\032\203\001\002\000\020\003\144\022\132\034" +
    "\131\040\127\041\037\042\114\046\136\001\002\000\014" +
    "\013\uffd2\015\uffd2\023\160\024\156\033\uffd2\001\002\000" +
    "\020\003\144\022\132\034\131\040\127\041\037\042\114" +
    "\046\136\001\002\000\014\013\uffdd\015\uffdd\023\160\024" +
    "\156\033\uffdd\001\002\000\010\012\211\023\160\024\156" +
    "\001\002\000\016\012\uffc4\013\uffd5\015\uffd5\023\uffc4\024" +
    "\uffc4\033\uffd5\001\002\000\022\004\065\006\100\010\072" +
    "\016\073\017\103\020\076\040\070\044\075\001\002\000" +
    "\010\013\uffd6\015\uffd6\033\uffd6\001\002\000\010\014\215" +
    "\023\160\024\156\001\002\000\016\013\uffd7\014\uffc4\015" +
    "\uffd7\023\uffc4\024\uffc4\033\uffd7\001\002\000\022\004\065" +
    "\006\100\010\072\016\073\017\103\020\076\040\070\044" +
    "\075\001\002\000\004\013\217\001\002\000\022\004\065" +
    "\006\100\010\072\016\073\017\103\020\076\040\070\044" +
    "\075\001\002\000\010\013\uffd8\015\uffd8\033\uffd8\001\002" +
    "\000\020\003\144\022\132\034\131\040\127\041\037\042" +
    "\114\046\136\001\002\000\004\030\uffcd\001\002\000\026" +
    "\003\144\022\132\023\160\024\156\030\uffcb\034\131\040" +
    "\127\041\037\042\114\046\136\001\002\000\004\030\uffcc" +
    "\001\002\000\004\035\226\001\002\000\044\003\uffb6\013" +
    "\uffc9\015\uffc9\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\032\uffb6\033\uffc9\034\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\046\uffb6\001\002\000\014\003\uffef\004\uffef" +
    "\007\uffef\033\uffef\045\uffef\001\002\000\004\002\uffff\001" +
    "\002\000\006\004\065\047\021\001\002\000\006\003\uffec" +
    "\033\uffec\001\002\000\006\033\uffe7\034\234\001\002\000" +
    "\004\040\237\001\002\000\004\033\236\001\002\000\006" +
    "\004\uffe9\047\uffe9\001\002\000\006\031\ufffe\036\ufffe\001" +
    "\002\000\006\031\247\036\024\001\002\000\006\033\243" +
    "\035\242\001\002\000\006\031\uffe8\033\uffe8\001\002\000" +
    "\004\040\237\001\002\000\006\031\245\036\024\001\002" +
    "\000\010\021\027\033\ufff1\035\ufff1\001\002\000\006\033" +
    "\uffe5\035\uffe5\001\002\000\010\021\027\033\ufff1\035\ufff1" +
    "\001\002\000\006\033\uffe6\035\uffe6\001\002\000\006\031" +
    "\uffe7\034\234\001\002\000\004\031\253\001\002\000\010" +
    "\003\010\021\027\033\007\001\002\000\006\003\010\033" +
    "\007\001\002\000\006\004\uffea\047\uffea\001\002\000\006" +
    "\004\uffeb\047\uffeb\001\002\000\016\003\ufff6\004\ufff6\007" +
    "\ufff6\033\ufff6\045\ufff6\047\ufff6\001\002\000\016\003\uffed" +
    "\004\uffed\007\uffed\033\uffed\045\uffed\047\021\001\002\000" +
    "\014\003\010\004\065\007\057\033\007\045\060\001\002" +
    "\000\004\037\263\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\004\002\004\001\001\000\004\037\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\256\001\001\000\012\004" +
    "\015\042\014\043\012\044\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\017\040" +
    "\016\001\001\000\002\001\001\000\012\005\062\006\061" +
    "\012\060\037\063\001\001\000\004\003\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\042\010\027\001\001\000\006\007\030\010\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\230\042\014" +
    "\043\012\044\013\001\001\000\002\001\001\000\004\037" +
    "\226\001\001\000\002\001\001\000\022\006\076\015\103" +
    "\016\104\017\100\021\070\031\073\033\065\034\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\020\222" +
    "\022\221\024\144\025\140\026\133\027\132\030\127\032" +
    "\142\035\137\001\001\000\002\001\001\000\022\020\212" +
    "\024\144\025\140\026\133\027\132\030\127\032\142\035" +
    "\137\001\001\000\022\020\206\024\144\025\140\026\133" +
    "\027\132\030\127\032\142\035\137\001\001\000\002\001" +
    "\001\000\016\006\076\017\176\021\070\031\073\033\065" +
    "\034\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\076\017\105\021" +
    "\070\031\073\033\065\034\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\134\026\133\027\132\030\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\020\164\023\165\024\144\025" +
    "\140\026\133\027\132\030\127\032\142\035\137\001\001" +
    "\000\012\024\163\026\133\027\132\030\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\020\141\024\144\025\140\026\133\027" +
    "\132\030\127\032\142\035\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\144\025\140" +
    "\026\133\027\132\030\127\032\154\001\001\000\014\024" +
    "\144\025\151\026\133\027\132\030\127\001\001\000\016" +
    "\024\144\025\140\026\133\027\132\030\127\032\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\153" +
    "\026\133\027\132\030\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\024\144\025\140\026\133\027\132" +
    "\030\127\032\142\035\162\001\001\000\016\006\076\017" +
    "\161\021\070\031\073\033\065\034\066\001\001\000\020" +
    "\024\144\025\140\026\133\027\132\030\127\032\142\035" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\171\024\144" +
    "\025\140\026\133\027\132\030\127\032\142\035\137\001" +
    "\001\000\002\001\001\000\004\036\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\020\203\024\144\025\140\026" +
    "\133\027\132\030\127\032\142\035\137\001\001\000\002" +
    "\001\001\000\022\020\205\024\144\025\140\026\133\027" +
    "\132\030\127\032\142\035\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\076\017" +
    "\211\021\070\031\073\033\065\034\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\076\017\215\021\070\031\073\033\065\034\066\001\001" +
    "\000\002\001\001\000\016\006\076\017\217\021\070\031" +
    "\073\033\065\034\066\001\001\000\002\001\001\000\024" +
    "\020\164\023\224\024\144\025\140\026\133\027\132\030" +
    "\127\032\142\035\137\001\001\000\002\001\001\000\024" +
    "\020\222\022\223\024\144\025\140\026\133\027\132\030" +
    "\127\032\142\035\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\231\040\016\001\001\000\002\001\001" +
    "\000\004\013\234\001\001\000\006\003\237\014\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\243\001\001\000\002\001\001\000\006\007\245" +
    "\010\027\001\001\000\002\001\001\000\006\007\247\010" +
    "\027\001\001\000\002\001\001\000\004\013\251\001\001" +
    "\000\002\001\001\000\006\010\253\037\254\001\001\000" +
    "\004\037\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\257\042\014\043\012\044\013\001\001\000" +
    "\006\011\260\040\016\001\001\000\012\005\062\006\261" +
    "\012\060\037\063\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	public String Intermediate_code = "";

	public Node myTree = new Node("INIT");

	public Node getMyTree(){
		return myTree;
	}

	public void report_error(String message, Object info) {
		if (info instanceof Symbol) {
			if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
				int line = (((Symbol)info).left)+1;
				int column = (((Symbol)info).right)+1;
				System.out.println(message + " " + " (line "+line+", column "+column+")");
			}
		}
		System.err.println(message);
	}
	public void syntax_error(Symbol s){
		String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
		//errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
		System.err.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
	}

	public void unrecovered_syntax_error(Symbol s) {
		if (s.left < 1 || s.left < 1) return;
		String val = s.value != null ? s.value.toString() : getTokenName(s.sym);
		//errors.add("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);
		System.err.println("Error sintactico en la linea: " + s.left +" columna: "+ s.right + " simbolo: " + val);

	}

	public String getTokenName(int id){
		String value = sym.terminalNames[id];
		switch(id) {
			case sym.ParentesisAbierto:
				return "(";
			case sym.ParentesisCerrado:
				return ")";
			case sym.Coma:
				return ",";
			case sym.AsignacionTipo:
				return ":";
			case sym.AsignacionVariable:
				return ":=";
			case sym.FinalInstruccion:
				return ";";
			case sym.For:
				return "for";
			case sym.While:
				return "while";
			case sym.Repeat:
				return "repeat";
			case sym.If:
				return "if";
			case sym.AsignacionIgual:
				return "=";	
			default:
				return value;  
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= Program Variable final_instruccion_error declarations subprogram_declarations compound_statement Punto 
            {
              Object RESULT =null;
		

			System.out.println("COMPILADO CON EXITO");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Program final_instruccion_error declarations subprogram_declarations compound_statement Punto 
            {
              Object RESULT =null;
		
			System.out.println("COMPILADO CON EXITO");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identifier_list ::= Variable 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifier_list ::= identifier_list Coma Variable 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations Var identifier_list AsignacionTipo type FinalInstruccion 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= char_declaration 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarations ::= integer_declaration 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations ::= boolean_declaration 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarations ::= declarations Var identifier_list error type FinalInstruccion 
            {
              Object RESULT =null;
		
			 parser.report_error("Error en la asignacion de tipo", null); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarations ::= declarations records 
            {
              Object RESULT =null;
		
			 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarations ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // char_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual constant_character FinalInstruccion 
            {
              Object RESULT =null;
		
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char_declaration",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // integer_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual Numero FinalInstruccion 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer_declaration",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolean_declaration ::= declarations Var identifier_list AsignacionTipo type AsignacionIgual Variable FinalInstruccion 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_declaration",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= standard_type 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // standard_type ::= Tipo 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standard_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // subprogram_declarations ::= subprogram_declarations subprogram_declaration final_instruccion_error 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // subprogram_declarations ::= subprogram_declarations final_instruccion_error 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // subprogram_declarations ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // subprogram_declaration ::= subprogram_head declarations compound_statement 
            {
              Object RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // subprogram_head ::= Function Variable arguments AsignacionTipo standard_type final_instruccion_error 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_head",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subprogram_head ::= Function Variable arguments AsignacionTipo final_instruccion_error 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_head",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // subprogram_head ::= Procedure Variable arguments FinalInstruccion 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_head",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arguments ::= ParentesisAbierto parameter_list ParentesisCerrado 
            {
              Object RESULT =null;
		 
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arguments ::= 
            {
              Object RESULT =null;
		 
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_list ::= identifier_list AsignacionTipo type 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= parameter_list FinalInstruccion identifier_list AsignacionTipo type 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // compound_statement ::= Begin optional_statements End 
            {
              Object RESULT =null;
		 

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // optional_statements ::= statement_list 
            {
              Object RESULT =null;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object state_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			//System.out.println("LIST2: " + state_list);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optional_statements ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_list ::= statement FinalInstruccion 
            {
              Object RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			ArrayList n = new ArrayList();
			
			n.add(state);

			RESULT = n;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_list ::= error FinalInstruccion 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el statement", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= statement_list statement FinalInstruccion 
            {
              Object RESULT =null;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object state_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			//System.out.println("LIST: " + state_list);
			ArrayList n = new ArrayList();
			
			n.add(state);
			n.addAll((ArrayList)state_list);

			RESULT = n;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_list ::= statement_list error FinalInstruccion 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el statement", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= variable AsignacionVariable expression 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)var, (ExpressionNode)exp); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= procedure_statement 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= compound_statement 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= write_function 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= read_function 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= If expression Then statement Else statement 
            {
              Object RESULT =null;
		int if_stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int if_stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object if_state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int if_else_stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if_else_stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object if_else_state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			IfNode ifNode = new IfNode("If");
			
			/*ifNode.createBodyNode((ArrayList)if_state);         
			ifNode.createElseNode((ArrayList)if_else_state);*/
			
			myTree = ifNode;
			RESULT = ifNode;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= If error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el If", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= While expression Do statement 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			WhileNode whileNode = new WhileNode(new ExpressionNode("Expression", (ExpressionNode)exp), (Node)state);

			myTree = whileNode;
			RESULT = whileNode;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= While error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el While", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= For Variable AsignacionVariable factor To expression Do statement 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
			ForNode forNode = new ForNode(new Node("Variable"), new Node("Factor"), new ExpressionNode("Expression", (ExpressionNode)exp), (Node)state);

			myTree = forNode;
			RESULT = forNode;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= For error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el For", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= Repeat statement Until Variable AsignacionIgual expression 
            {
              Object RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object state = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RepeatNode repeatNode = new RepeatNode((Node)state, new Node("Variable"), new ExpressionNode("Expression", (ExpressionNode)exp));
		
			myTree = repeatNode;
			RESULT = repeatNode;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= Repeat error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en el Repeat", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // write_function ::= Write ParentesisAbierto constant_string Coma Variable ParentesisCerrado 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_function",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write_function ::= Write ParentesisAbierto constant_string ParentesisCerrado 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_function",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_function ::= Read ParentesisAbierto Variable ParentesisCerrado 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_function",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable ::= Variable tail 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tail ::= expression tail 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tail",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tail ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tail",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedure_statement ::= Variable 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // procedure_statement ::= Variable ParentesisAbierto expression_list ParentesisCerrado 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression_list ::= expression extra_expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, (ExpressionNode)ex_exp); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression And relation 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, new Node("and"), (ExpressionNode)rel); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression Or relation 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, new Node("or"), (ExpressionNode)rel);
			myTree = p;
			RESULT = p; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= relation 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = rel;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= error 
            {
              Object RESULT =null;
		
			parser.report_error("Error en la expresion", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // extra_expression ::= Coma expression extra_expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp, (ExpressionNode)ex_exp); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // extra_expression ::= 
            {
              Object RESULT =null;
		
			// Empty
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relation ::= simple_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = simp_exp;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relation ::= simple_expression OpRel simple_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simp_exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simp_exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simp_exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)simp_exp, new Node("Operador Relacional"), (ExpressionNode)simp_exp2); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relation ::= simple_expression AsignacionIgual simple_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asignacion_igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asignacion_igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asignacion_igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simp_exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simp_exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simp_exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)simp_exp, new Node("Asignacion Igual"), (ExpressionNode)simp_exp2); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_expression ::= simple_expression OpSuma mult_expression 
            {
              Object RESULT =null;
		int simp_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int simp_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object simp_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opsumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opsuma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mult_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mult_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mult_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)simp_exp, new Node("Operador Suma"), (ExpressionNode)mult_exp); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_expression ::= mult_expression 
            {
              Object RESULT =null;
		int mult_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mult_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mult_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = mult_exp;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mult_expression ::= mult_expression OpMult factor 
            {
              Object RESULT =null;
		int mult_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mult_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mult_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opmultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opmult = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)mult_exp, new Node("Operador Multiplicacion"), new Node("Factor")); 
			myTree = p;
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mult_expression ::= factor 
            {
              Object RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = fac;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= Numero 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Node n = new Node("Numero");
			n.setValue("Integer");
			ExpressionNode p = new ExpressionNode("Expression" , n);
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= Variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Node n = new Node("Variable");
			n.setValue("Variable");
			ExpressionNode p = new ExpressionNode("Expression", n);
			RESULT = p;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= Not factor 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Node n = new Node("Not");
			n.setValue("Not");
			ExpressionNode p = new ExpressionNode("Expression" , n, new Node("Factor"));
			RESULT = p; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= constant 
            {
              Object RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = cons;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= ParentesisAbierto expression_list ParentesisCerrado 
            {
              Object RESULT =null;
		int exp_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			ExpressionNode p = new ExpressionNode("Expression", (ExpressionNode)exp_list); 
			myTree = p;
			RESULT = p; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // constant ::= constant_character 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // constant ::= constant_string 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // constant_character ::= Constchar 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_character",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // constant_string ::= Conststr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Token token = new Token(c.toString(), cright + 1, cleft + 1);
			RESULT = token;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_string",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // final_instruccion_error ::= FinalInstruccion 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_instruccion_error",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // final_instruccion_error ::= error 
            {
              Object RESULT =null;
		
			parser.report_error("Falta final de instruccion", null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_instruccion_error",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // records ::= Var Variable AsignacionIgual Record lista_record_values End 
            {
              Object RESULT =null;
		 

		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("records",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_record_values ::= Variable AsignacionTipo Tipo FinalInstruccion lista_record_values 
            {
              Object RESULT =null;
		

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_record_values ::= 
            {
              Object RESULT =null;
		
			// Empty	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
